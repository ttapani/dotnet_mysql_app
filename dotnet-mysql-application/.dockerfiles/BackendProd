#! dockerfile
FROM microsoft/dotnet:2.1-sdk-stretch AS build-env

# Set a working dir at least 2 deep. The output and intermediate output folders will be /code/obj and /code/bin
WORKDIR /code/app

# Install curl
#RUN apk --no-cache add curl
#RUN apk --no-cache add 'nodejs<8.11.1-r0'
#RUN apk --no-cache add 'nodejs-npm<8.11.1-r0'

# Install node
ENV NODE_VERSION 8.11.1

RUN curl -O "https://nodejs.org/dist/v${NODE_VERSION}/SHASUMS256.txt" && curl -SL "https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz" --output node-v${NODE_VERSION}-linux-x64.tar.gz \
    && grep node-v${NODE_VERSION}-linux-x64.tar.gz SHASUMS256.txt | sha256sum -c - \
    && tar -xzf "node-v${NODE_VERSION}-linux-x64.tar.gz" -C /usr/local --strip-components=1 \
    && rm node-v${NODE_VERSION}-linux-x64.tar.gz \
    && ln -s /usr/local/bin/node /usr/bin/node

# copy csproj and restore as distinct layers
COPY *.csproj ./
RUN dotnet restore

# By copying these into the image when building it, we don't have to re-run restore everytime we launch a new container
COPY dotnet-mysql-application.csproj .
COPY Directory.Build.props .
COPY . ./
RUN dotnet publish -c release -o published -r linux-x64

FROM microsoft/dotnet:2.1-aspnetcore-runtime

WORKDIR /app
COPY --from=build-env /code/app/published .
ENV ASPNETCORE_URLS=http://+:5000
EXPOSE 5000/tcp
CMD ["dotnet", "./dotnet-mysql-app.dll"]  